---
version : '3.9'

services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
    ports:
      - 5432:5432
    volumes:
      - pg_data_bot:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      timeout: 3s
      retries: 10
      interval: 3s
    networks:
      - my_network_bot

  redis:
    container_name: redis
    image: redis
    restart: always
    environment:
      POSTGRES_HOST: db
      REDIS_HOST: redis
    ports:
      - 6379:6379
    networks:
      - my_network_bot

  api:
    build: .
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      REDIS_HOST: 'redis'
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8000:8000
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./:/code
    networks:
      - my_network_bot

  bot:
    build: .
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    command: python manage.py runbot
    networks:
      - my_network_bot


volumes :
  pg_data_bot:

networks:
  my_network_bot:
    driver: bridge
